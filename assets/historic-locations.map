{"version":3,"sources":["vendor/ember-cli/app-prefix.js","historic-locations/adapters/application.js","historic-locations/app.js","historic-locations/components/google-map.js","historic-locations/components/lf-outlet.js","historic-locations/components/lf-overlay.js","historic-locations/components/liquid-child.js","historic-locations/components/liquid-container.js","historic-locations/components/liquid-if.js","historic-locations/components/liquid-measured.js","historic-locations/components/liquid-modal.js","historic-locations/components/liquid-outlet.js","historic-locations/components/liquid-spacer.js","historic-locations/components/liquid-versions.js","historic-locations/components/liquid-with.js","historic-locations/components/lm-container.js","historic-locations/components/main-console.js","historic-locations/controllers/application.js","historic-locations/controllers/exhibits/show.js","historic-locations/controllers/map.js","historic-locations/helpers/lf-yield-inverse.js","historic-locations/helpers/liquid-bind.js","historic-locations/helpers/liquid-if.js","historic-locations/helpers/liquid-outlet.js","historic-locations/helpers/liquid-unless.js","historic-locations/helpers/liquid-with.js","historic-locations/initializers/app-version.js","historic-locations/initializers/export-application-global.js","historic-locations/initializers/liquid-fire.js","historic-locations/models/exhibit.js","historic-locations/router.js","historic-locations/routes/exhibits.js","historic-locations/routes/exhibits/show.js","historic-locations/routes/map.js","historic-locations/services/liquid-fire-modals.js","historic-locations/services/liquid-fire-transitions.js","historic-locations/templates/application.js","historic-locations/templates/components/google-map.js","historic-locations/templates/components/liquid-bind.js","historic-locations/templates/components/liquid-container.js","historic-locations/templates/components/liquid-if.js","historic-locations/templates/components/liquid-measured.js","historic-locations/templates/components/liquid-modal.js","historic-locations/templates/components/liquid-outlet.js","historic-locations/templates/components/liquid-spacer.js","historic-locations/templates/components/liquid-versions.js","historic-locations/templates/components/liquid-with.js","historic-locations/templates/components/main-console.js","historic-locations/templates/exhibits.js","historic-locations/templates/exhibits/show.js","historic-locations/templates/landing.js","historic-locations/templates/map.js","historic-locations/templates/other.js","historic-locations/tests/adapters/application.jshint.js","historic-locations/tests/app.jshint.js","historic-locations/tests/components/google-map.jshint.js","historic-locations/tests/components/main-console.jshint.js","historic-locations/tests/controllers/application.jshint.js","historic-locations/tests/controllers/exhibits/show.jshint.js","historic-locations/tests/controllers/map.jshint.js","historic-locations/tests/helpers/resolver.js","historic-locations/tests/helpers/resolver.jshint.js","historic-locations/tests/helpers/start-app.js","historic-locations/tests/helpers/start-app.jshint.js","historic-locations/tests/models/exhibit.jshint.js","historic-locations/tests/router.jshint.js","historic-locations/tests/routes/exhibits.jshint.js","historic-locations/tests/routes/exhibits/show.jshint.js","historic-locations/tests/routes/map.jshint.js","historic-locations/tests/test-helper.js","historic-locations/tests/test-helper.jshint.js","historic-locations/tests/transitions.jshint.js","historic-locations/tests/unit/components/google-map-test.js","historic-locations/tests/unit/components/google-map-test.jshint.js","historic-locations/tests/unit/components/main-console-test.js","historic-locations/tests/unit/components/main-console-test.jshint.js","historic-locations/transitions.js","historic-locations/transitions/cross-fade.js","historic-locations/transitions/default.js","historic-locations/transitions/explode.js","historic-locations/transitions/fade.js","historic-locations/transitions/flex-grow.js","historic-locations/transitions/fly-to.js","historic-locations/transitions/move-over.js","historic-locations/transitions/scale.js","historic-locations/transitions/scroll-then.js","historic-locations/transitions/to-down.js","historic-locations/transitions/to-left.js","historic-locations/transitions/to-right.js","historic-locations/transitions/to-up.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('historic-locations/adapters/application', ['exports', 'ember-data'], function (exports, DS) {\n\n\t'use strict';\n\n\texports['default'] = DS['default'].FixtureAdapter.extend();\n\n});","define('historic-locations/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'historic-locations/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('historic-locations/components/google-map', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    classNames: [\"google-map\"],\n\n    buildMap: (function () {\n      var mapOptions = {\n        zoom: 14,\n        center: new google.maps.LatLng(33.76743, -84.360744)\n      };\n\n      var elementId = document.getElementById(this.get(\"elementId\"));\n      var map = new google.maps.Map(elementId, mapOptions);\n      this.set(\"map\", map);\n      this.addMarkers();\n    }).on(\"didInsertElement\"),\n\n    addMarkers: function addMarkers() {\n      var map = this.get(\"map\");\n      var markers = [];\n      var _this = this;\n      this.get(\"locations\").forEach(function (location) {\n        var myLatlng = new google.maps.LatLng(location.get(\"latitude\"), location.get(\"longitude\"));\n        var marker = new google.maps.Marker({\n          position: myLatlng,\n          map: map,\n          title: location.get(\"title\")\n        });\n\n        google.maps.event.addListener(marker, \"click\", function () {\n          _this.sendAction(\"onMarkerClick\", location.get(\"id\"));\n        });\n        markers.pushObject(marker);\n      });\n      this.currentLocation();\n      this.set(\"markers\", markers);\n    },\n\n    currentLocation: function currentLocation() {\n      var component = this;\n      if (\"geolocation\" in navigator) {\n        var geo_success = function (position) {\n          var latlng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n          var marker = new google.maps.Marker({\n            position: latlng,\n            map: component.get(\"map\")\n          });\n          component.set(\"currentMarker\", marker);\n        };\n\n        var geo_error = function () {\n          alert(\"Sorry, no position available.\");\n        };\n\n        var geo_options = {\n          enableHighAccuracy: true,\n          maximumAge: 30000,\n          timeout: 27000\n        };\n\n        var wpid = navigator.geolocation.watchPosition(geo_success, geo_error, geo_options);\n      } else {\n        console.log(\"This is not going to work well without giving your location.\");\n      }\n    }\n  });\n\n});","define('historic-locations/components/lf-outlet', ['exports', 'liquid-fire/ember-internals'], function (exports, ember_internals) {\n\n\t'use strict';\n\n\texports['default'] = ember_internals.StaticOutlet;\n\n});","define('historic-locations/components/lf-overlay', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  var COUNTER = \"__lf-modal-open-counter\";\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: \"span\",\n    classNames: [\"lf-overlay\"],\n\n    didInsertElement: function didInsertElement() {\n      var body = Ember['default'].$(\"body\");\n      var counter = body.data(COUNTER) || 0;\n      body.addClass(\"lf-modal-open\");\n      body.data(COUNTER, counter + 1);\n    },\n\n    willDestroy: function willDestroy() {\n      var body = Ember['default'].$(\"body\");\n      var counter = body.data(COUNTER) || 0;\n      body.data(COUNTER, counter - 1);\n      if (counter < 2) {\n        body.removeClass(\"lf-modal-open\");\n      }\n    }\n  });\n\n});","define('historic-locations/components/liquid-child', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    classNames: [\"liquid-child\"],\n    attributeBindings: [\"style\"],\n    style: Ember['default'].computed(\"visible\", function () {\n      return new Ember['default'].Handlebars.SafeString(this.get(\"visible\") ? \"\" : \"visibility:hidden\");\n    }),\n    tellContainerWeRendered: Ember['default'].on(\"didInsertElement\", function () {\n      this.sendAction(\"didRender\", this);\n    })\n  });\n\n});","define('historic-locations/components/liquid-container', ['exports', 'ember', 'liquid-fire/growable', 'historic-locations/components/liquid-measured'], function (exports, Ember, Growable, liquid_measured) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(Growable['default'], {\n    classNames: [\"liquid-container\"],\n    classNameBindings: [\"liquidAnimating\"],\n\n    lockSize: function lockSize(elt, want) {\n      elt.outerWidth(want.width);\n      elt.outerHeight(want.height);\n    },\n\n    unlockSize: function unlockSize() {\n      var _this = this;\n\n      var doUnlock = function () {\n        if (!_this.isDestroyed) {\n          _this.set(\"liquidAnimating\", false);\n        }\n        var elt = _this.$();\n        if (elt) {\n          elt.css({ width: \"\", height: \"\" });\n        }\n      };\n      if (this._scaling) {\n        this._scaling.then(doUnlock);\n      } else {\n        doUnlock();\n      }\n    },\n\n    startMonitoringSize: Ember['default'].on(\"didInsertElement\", function () {\n      this._wasInserted = true;\n    }),\n\n    actions: {\n\n      willTransition: function willTransition(versions) {\n        if (!this._wasInserted) {\n          return;\n        }\n\n        // Remember our own size before anything changes\n        var elt = this.$();\n        this._cachedSize = liquid_measured.measure(elt);\n\n        // And make any children absolutely positioned with fixed sizes.\n        for (var i = 0; i < versions.length; i++) {\n          goAbsolute(versions[i]);\n        }\n\n        // Apply '.liquid-animating' to liquid-container allowing\n        // any customizable CSS control while an animating is occuring\n        this.set(\"liquidAnimating\", true);\n      },\n\n      afterChildInsertion: function afterChildInsertion(versions) {\n        var elt = this.$();\n\n        // Measure  children\n        var sizes = [];\n        for (var i = 0; i < versions.length; i++) {\n          if (versions[i].view) {\n            sizes[i] = liquid_measured.measure(versions[i].view.$());\n          }\n        }\n\n        // Measure ourself again to see how big the new children make\n        // us.\n        var want = liquid_measured.measure(elt);\n        var have = this._cachedSize || want;\n\n        // Make ourself absolute\n        this.lockSize(elt, have);\n\n        // Make the children absolute and fixed size.\n        for (i = 0; i < versions.length; i++) {\n          goAbsolute(versions[i], sizes[i]);\n        }\n\n        // Kick off our growth animation\n        this._scaling = this.animateGrowth(elt, have, want);\n      },\n\n      afterTransition: function afterTransition(versions) {\n        for (var i = 0; i < versions.length; i++) {\n          goStatic(versions[i]);\n        }\n        this.unlockSize();\n      }\n    }\n  });\n\n  function goAbsolute(version, size) {\n    if (!version.view) {\n      return;\n    }\n    var elt = version.view.$();\n    var pos = elt.position();\n    if (!size) {\n      size = liquid_measured.measure(elt);\n    }\n    elt.outerWidth(size.width);\n    elt.outerHeight(size.height);\n    elt.css({\n      position: \"absolute\",\n      top: pos.top,\n      left: pos.left\n    });\n  }\n\n  function goStatic(version) {\n    if (version.view) {\n      version.view.$().css({ width: \"\", height: \"\", position: \"\" });\n    }\n  }\n\n});","define('historic-locations/components/liquid-if', ['exports', 'ember', 'liquid-fire/ember-internals'], function (exports, Ember, ember_internals) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    _yieldInverse: ember_internals.inverseYieldMethod,\n    hasInverse: Ember['default'].computed(\"inverseTemplate\", function () {\n      return !!this.get(\"inverseTemplate\");\n    })\n  });\n\n});","define('historic-locations/components/liquid-measured', ['exports', 'liquid-fire/mutation-observer', 'ember'], function (exports, MutationObserver, Ember) {\n\n  'use strict';\n\n  exports.measure = measure;\n\n  exports['default'] = Ember['default'].Component.extend({\n\n    didInsertElement: function didInsertElement() {\n      var self = this;\n\n      // This prevents margin collapse\n      this.$().css({\n        overflow: \"auto\"\n      });\n\n      this.didMutate();\n\n      this.observer = new MutationObserver['default'](function (mutations) {\n        self.didMutate(mutations);\n      });\n      this.observer.observe(this.get(\"element\"), {\n        attributes: true,\n        subtree: true,\n        childList: true,\n        characterData: true\n      });\n      this.$().bind(\"webkitTransitionEnd\", function () {\n        self.didMutate();\n      });\n      // Chrome Memory Leak: https://bugs.webkit.org/show_bug.cgi?id=93661\n      window.addEventListener(\"unload\", function () {\n        self.willDestroyElement();\n      });\n    },\n\n    willDestroyElement: function willDestroyElement() {\n      if (this.observer) {\n        this.observer.disconnect();\n      }\n    },\n\n    transitionMap: Ember['default'].inject.service(\"liquid-fire-transitions\"),\n\n    didMutate: function didMutate() {\n      // by incrementing the running transitions counter here we prevent\n      // tests from falling through the gap between the time they\n      // triggered mutation the time we may actually animate in\n      // response.\n      var tmap = this.get(\"transitionMap\");\n      tmap.incrementRunningTransitions();\n      Ember['default'].run.next(this, function () {\n        this._didMutate();\n        tmap.decrementRunningTransitions();\n      });\n    },\n\n    _didMutate: function _didMutate() {\n      var elt = this.$();\n      if (!elt || !elt[0]) {\n        return;\n      }\n      this.set(\"measurements\", measure(elt));\n    }\n\n  });\n  function measure($elt) {\n    var width, height;\n\n    // if jQuery sees a zero dimension, it will temporarily modify the\n    // element's css to try to make its size measurable. But that's bad\n    // for us here, because we'll get an infinite recursion of mutation\n    // events. So we trap the zero case without hitting jQuery.\n\n    if ($elt[0].offsetWidth === 0) {\n      width = 0;\n    } else {\n      width = $elt.outerWidth();\n    }\n    if ($elt[0].offsetHeight === 0) {\n      height = 0;\n    } else {\n      height = $elt.outerHeight();\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  }\n\n});","define('historic-locations/components/liquid-modal', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    classNames: [\"liquid-modal\"],\n    currentContext: Ember['default'].computed.oneWay(\"owner.modalContexts.lastObject\"),\n\n    owner: Ember['default'].inject.service(\"liquid-fire-modals\"),\n\n    innerView: Ember['default'].computed(\"currentContext\", function () {\n      var self = this,\n          current = this.get(\"currentContext\"),\n          name = current.get(\"name\"),\n          container = this.get(\"container\"),\n          component = container.lookup(\"component-lookup:main\").lookupFactory(name);\n      Ember['default'].assert(\"Tried to render a modal using component '\" + name + \"', but couldn't find it.\", !!component);\n\n      var args = Ember['default'].copy(current.get(\"params\"));\n\n      args.registerMyself = Ember['default'].on(\"init\", function () {\n        self.set(\"innerViewInstance\", this);\n      });\n\n      // set source so we can bind other params to it\n      args._source = Ember['default'].computed(function () {\n        return current.get(\"source\");\n      });\n\n      var otherParams = current.get(\"options.otherParams\");\n      var from, to;\n      for (from in otherParams) {\n        to = otherParams[from];\n        args[to] = Ember['default'].computed.alias(\"_source.\" + from);\n      }\n\n      var actions = current.get(\"options.actions\") || {};\n\n      // Override sendAction in the modal component so we can intercept and\n      // dynamically dispatch to the controller as expected\n      args.sendAction = function (name) {\n        var actionName = actions[name];\n        if (!actionName) {\n          this._super.apply(this, Array.prototype.slice.call(arguments));\n          return;\n        }\n\n        var controller = current.get(\"source\");\n        var args = Array.prototype.slice.call(arguments, 1);\n        args.unshift(actionName);\n        controller.send.apply(controller, args);\n      };\n\n      return component.extend(args);\n    }),\n\n    actions: {\n      outsideClick: function outsideClick() {\n        if (this.get(\"currentContext.options.dismissWithOutsideClick\")) {\n          this.send(\"dismiss\");\n        } else {\n          proxyToInnerInstance(this, \"outsideClick\");\n        }\n      },\n      escape: function escape() {\n        if (this.get(\"currentContext.options.dismissWithEscape\")) {\n          this.send(\"dismiss\");\n        } else {\n          proxyToInnerInstance(this, \"escape\");\n        }\n      },\n      dismiss: function dismiss() {\n        var source = this.get(\"currentContext.source\"),\n            proto = source.constructor.proto(),\n            params = this.get(\"currentContext.options.withParams\"),\n            clearThem = {};\n\n        for (var key in params) {\n          if (proto[key] instanceof Ember['default'].ComputedProperty) {\n            clearThem[key] = undefined;\n          } else {\n            clearThem[key] = proto[key];\n          }\n        }\n        source.setProperties(clearThem);\n      }\n    }\n  });\n\n  function proxyToInnerInstance(self, message) {\n    var vi = self.get(\"innerViewInstance\");\n    if (vi) {\n      vi.send(message);\n    }\n  }\n\n});","define('historic-locations/components/liquid-outlet', ['exports', 'ember', 'liquid-fire/ember-internals'], function (exports, Ember, ember_internals) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Component.extend(ember_internals.OutletBehavior);\n\n});","define('historic-locations/components/liquid-spacer', ['exports', 'historic-locations/components/liquid-measured', 'liquid-fire/growable', 'ember'], function (exports, liquid_measured, Growable, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend(Growable['default'], {\n    enabled: true,\n\n    didInsertElement: function didInsertElement() {\n      var child = this.$(\"> div\");\n      var measurements = this.myMeasurements(liquid_measured.measure(child));\n      this.$().css({\n        overflow: \"hidden\",\n        outerWidth: measurements.width,\n        outerHeight: measurements.height\n      });\n    },\n\n    sizeChange: Ember['default'].observer(\"measurements\", function () {\n      if (!this.get(\"enabled\")) {\n        return;\n      }\n      var elt = this.$();\n      if (!elt || !elt[0]) {\n        return;\n      }\n      var want = this.myMeasurements(this.get(\"measurements\"));\n      var have = liquid_measured.measure(this.$());\n      this.animateGrowth(elt, have, want);\n    }),\n\n    // given our child's outerWidth & outerHeight, figure out what our\n    // outerWidth & outerHeight should be.\n    myMeasurements: function myMeasurements(childMeasurements) {\n      var elt = this.$();\n      return {\n        width: childMeasurements.width + sumCSS(elt, padding(\"width\")) + sumCSS(elt, border(\"width\")),\n        height: childMeasurements.height + sumCSS(elt, padding(\"height\")) + sumCSS(elt, border(\"height\"))\n      };\n      //if (this.$().css('box-sizing') === 'border-box') {\n    }\n\n  });\n\n  function sides(dimension) {\n    return dimension === \"width\" ? [\"Left\", \"Right\"] : [\"Top\", \"Bottom\"];\n  }\n\n  function padding(dimension) {\n    var s = sides(dimension);\n    return [\"padding\" + s[0], \"padding\" + s[1]];\n  }\n\n  function border(dimension) {\n    var s = sides(dimension);\n    return [\"border\" + s[0] + \"Width\", \"border\" + s[1] + \"Width\"];\n  }\n\n  function sumCSS(elt, fields) {\n    var accum = 0;\n    for (var i = 0; i < fields.length; i++) {\n      var num = parseFloat(elt.css(fields[i]), 10);\n      if (!isNaN(num)) {\n        accum += num;\n      }\n    }\n    return accum;\n  }\n\n});","define('historic-locations/components/liquid-versions', ['exports', 'ember', 'liquid-fire/ember-internals'], function (exports, Ember, ember_internals) {\n\n  'use strict';\n\n  var get = Ember['default'].get;\n  var set = Ember['default'].set;\n\n  exports['default'] = Ember['default'].Component.extend({\n    tagName: \"\",\n    name: \"liquid-versions\",\n\n    transitionMap: Ember['default'].inject.service(\"liquid-fire-transitions\"),\n\n    appendVersion: Ember['default'].on(\"init\", Ember['default'].observer(\"value\", function () {\n      var versions = get(this, \"versions\");\n      var firstTime = false;\n      var newValue = get(this, \"value\");\n      var oldValue;\n\n      if (!versions) {\n        firstTime = true;\n        versions = Ember['default'].A();\n      } else {\n        oldValue = versions[0];\n      }\n\n      // TODO: may need to extend the comparison to do the same kind of\n      // key-based diffing that htmlbars is doing.\n      if (!firstTime && (!oldValue && !newValue || oldValue === newValue)) {\n        return;\n      }\n\n      this.notifyContainer(\"willTransition\", versions);\n      var newVersion = {\n        value: newValue,\n        shouldRender: newValue || get(this, \"renderWhenFalse\")\n      };\n      versions.unshiftObject(newVersion);\n\n      this.firstTime = firstTime;\n      if (firstTime) {\n        set(this, \"versions\", versions);\n      }\n\n      if (!newVersion.shouldRender && !firstTime) {\n        this._transition();\n      }\n    })),\n\n    _transition: function _transition() {\n      var _this = this;\n\n      var versions = get(this, \"versions\");\n      var transition;\n      var firstTime = this.firstTime;\n      this.firstTime = false;\n\n      this.notifyContainer(\"afterChildInsertion\", versions);\n\n      transition = get(this, \"transitionMap\").transitionFor({\n        versions: versions,\n        parentElement: Ember['default'].$(ember_internals.containingElement(this)),\n        use: get(this, \"use\"),\n        // Using strings instead of booleans here is an\n        // optimization. The constraint system can match them more\n        // efficiently, since it treats boolean constraints as generic\n        // \"match anything truthy/falsy\" predicates, whereas string\n        // checks are a direct object property lookup.\n        firstTime: firstTime ? \"yes\" : \"no\",\n        helperName: get(this, \"name\")\n      });\n\n      if (this._runningTransition) {\n        this._runningTransition.interrupt();\n      }\n      this._runningTransition = transition;\n\n      transition.run().then(function (wasInterrupted) {\n        // if we were interrupted, we don't handle the cleanup because\n        // another transition has already taken over.\n        if (!wasInterrupted) {\n          _this.finalizeVersions(versions);\n          _this.notifyContainer(\"afterTransition\", versions);\n        }\n      }, function (err) {\n        _this.finalizeVersions(versions);\n        _this.notifyContainer(\"afterTransition\", versions);\n        throw err;\n      });\n    },\n\n    finalizeVersions: function finalizeVersions(versions) {\n      versions.replace(1, versions.length - 1);\n    },\n\n    notifyContainer: function notifyContainer(method, versions) {\n      var target = get(this, \"notify\");\n      if (target) {\n        target.send(method, versions);\n      }\n    },\n\n    actions: {\n      childDidRender: function childDidRender(child) {\n        var version = get(child, \"version\");\n        set(version, \"view\", child);\n        this._transition();\n      }\n    }\n\n  });\n\n});","define('historic-locations/components/liquid-with', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    name: \"liquid-with\"\n  });\n\n});","define('historic-locations/components/lm-container', ['exports', 'ember', 'liquid-fire/tabbable'], function (exports, Ember) {\n\n  'use strict';\n\n  /*\n     Parts of this file were adapted from ic-modal\n\n     https://github.com/instructure/ic-modal\n     Released under The MIT License (MIT)\n     Copyright (c) 2014 Instructure, Inc.\n  */\n\n  var lastOpenedModal = null;\n  Ember['default'].$(document).on(\"focusin\", handleTabIntoBrowser);\n\n  function handleTabIntoBrowser() {\n    if (lastOpenedModal) {\n      lastOpenedModal.focus();\n    }\n  }\n\n  exports['default'] = Ember['default'].Component.extend({\n    classNames: [\"lm-container\"],\n    attributeBindings: [\"tabindex\"],\n    tabindex: 0,\n\n    keyUp: function keyUp(event) {\n      // Escape key\n      if (event.keyCode === 27) {\n        this.sendAction();\n      }\n    },\n\n    keyDown: function keyDown(event) {\n      // Tab key\n      if (event.keyCode === 9) {\n        this.constrainTabNavigation(event);\n      }\n    },\n\n    didInsertElement: function didInsertElement() {\n      this.focus();\n      lastOpenedModal = this;\n    },\n\n    willDestroy: function willDestroy() {\n      lastOpenedModal = null;\n    },\n\n    focus: function focus() {\n      if (this.get(\"element\").contains(document.activeElement)) {\n        // just let it be if we already contain the activeElement\n        return;\n      }\n      var target = this.$(\"[autofocus]\");\n      if (!target.length) {\n        target = this.$(\":tabbable\");\n      }\n\n      if (!target.length) {\n        target = this.$();\n      }\n\n      target[0].focus();\n    },\n\n    constrainTabNavigation: function constrainTabNavigation(event) {\n      var tabbable = this.$(\":tabbable\");\n      var finalTabbable = tabbable[event.shiftKey ? \"first\" : \"last\"]()[0];\n      var leavingFinalTabbable = finalTabbable === document.activeElement ||\n      // handle immediate shift+tab after opening with mouse\n      this.get(\"element\") === document.activeElement;\n      if (!leavingFinalTabbable) {\n        return;\n      }\n      event.preventDefault();\n      tabbable[event.shiftKey ? \"last\" : \"first\"]()[0].focus();\n    },\n\n    click: function click(event) {\n      if (event.target === this.get(\"element\")) {\n        this.sendAction(\"clickAway\");\n      }\n    }\n  });\n\n});","define('historic-locations/components/main-console', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Component.extend({\n    classNames: [\"main-console\"],\n\n    onMap: (function () {\n      return this.get(\"currentPath\").split(\".\").indexOf(\"map\") > 0;\n    }).property(\"currentPath\"),\n\n    onExhibits: (function () {\n      return this.get(\"currentPath\").split(\".\").indexOf(\"exhibits\") > 0;\n    }).property(\"currentPath\"),\n\n    actions: {\n      showPage: function showPage(page) {\n        this.sendAction(\"showPage\", page);\n      }\n    }\n\n  });\n\n});","define('historic-locations/controllers/application', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n\n    actions: {\n      showPage: function showPage(page) {\n        this.transitionTo(page);\n      }\n    }\n\n  });\n\n});","define('historic-locations/controllers/exhibits/show', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].ObjectController.extend({});\n\n});","define('historic-locations/controllers/map', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n\n    actions: {\n      goToExhibit: function goToExhibit(exhibit_id) {\n        this.transitionTo(\"exhibits.show\", exhibit_id);\n      }\n    }\n\n  });\n\n});","define('historic-locations/helpers/lf-yield-inverse', ['exports', 'liquid-fire/ember-internals'], function (exports, ember_internals) {\n\n  'use strict';\n\n  exports['default'] = {\n    isHTMLBars: true,\n    helperFunction: ember_internals.inverseYieldHelper\n  };\n\n});","define('historic-locations/helpers/liquid-bind', ['exports', 'liquid-fire/ember-internals'], function (exports, ember_internals) {\n\n\t'use strict';\n\n\texports['default'] = ember_internals.makeHelperShim(\"liquid-bind\");\n\n});","define('historic-locations/helpers/liquid-if', ['exports', 'liquid-fire/ember-internals'], function (exports, ember_internals) {\n\n  'use strict';\n\n  exports['default'] = ember_internals.makeHelperShim(\"liquid-if\", function (params, hash, options) {\n    hash.helperName = \"liquid-if\";\n    hash.inverseTemplate = options.inverse;\n  });\n\n});","define('historic-locations/helpers/liquid-outlet', ['exports', 'liquid-fire/ember-internals'], function (exports, ember_internals) {\n\n  'use strict';\n\n  exports['default'] = ember_internals.makeHelperShim(\"liquid-outlet\", function (params, hash) {\n    hash._outletName = params[0] || \"main\";\n  });\n\n});","define('historic-locations/helpers/liquid-unless', ['exports', 'liquid-fire/ember-internals'], function (exports, ember_internals) {\n\n  'use strict';\n\n  exports['default'] = ember_internals.makeHelperShim(\"liquid-if\", function (params, hash, options) {\n    hash.helperName = \"liquid-unless\";\n    hash.inverseTemplate = options.template;\n    options.template = options.inverse;\n  });\n\n});","define('historic-locations/helpers/liquid-with', ['exports', 'liquid-fire/ember-internals'], function (exports, ember_internals) {\n\n\t'use strict';\n\n\texports['default'] = ember_internals.makeHelperShim(\"liquid-with\");\n\n});","define('historic-locations/initializers/app-version', ['exports', 'historic-locations/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function initialize(container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('historic-locations/initializers/export-application-global', ['exports', 'ember', 'historic-locations/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('historic-locations/initializers/liquid-fire', ['exports', 'liquid-fire/router-dsl-ext'], function (exports) {\n\n  'use strict';\n\n  // This initializer exists only to make sure that the following import\n  // happens before the app boots.\n  exports['default'] = {\n    name: \"liquid-fire\",\n    initialize: function initialize() {}\n  };\n\n});","define('historic-locations/models/exhibit', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  var Exhibit = DS['default'].Model.extend({\n    title: DS['default'].attr(\"string\"),\n    address: DS['default'].attr(\"string\"),\n    url: DS['default'].attr(\"string\"),\n    latitude: DS['default'].attr(\"number\"),\n    longitude: DS['default'].attr(\"number\"),\n    description: DS['default'].attr(\"string\")\n  });\n\n  Exhibit.reopenClass({\n    FIXTURES: [{\n      id: 1,\n      title: \"Everyone Loves Bikes\",\n      url: \"https://s3.amazonaws.com/dougs/all-bikes.png\",\n      description: \"Well I don't know, I guess I have some friends I don't see much that love doing things like this :)\",\n      latitude: 33.76743,\n      longitude: -84.360744\n    }, {\n      id: 2,\n      title: \"Look How Sweet!\",\n      url: \"https://s3.amazonaws.com/dougs/me-bikes-valentines.png\",\n      description: \"This is just a sweet little picture\",\n      latitude: 33.769294,\n      longitude: -84.362606\n    }, {\n      id: 3,\n      title: \"I Won\",\n      url: \"https://s3.amazonaws.com/dougs/me-leonard-cohen.png\",\n      description: \"I won this sweet vinyl!  And I was cold so I was waring Jenn's scarf.  But it all makes me look really cool!\",\n      latitude: 33.776683,\n      longitude: -84.365357\n    }, {\n      id: 4,\n      title: \"Me In Woods\",\n      url: \"https://s3.amazonaws.com/dougs/me-woods-cropped.png\",\n      description: \"Well, this is just me in the woods.  That is all.\",\n      latitude: 33.781133,\n      longitude: -84.36782\n    }]\n  });\n\n  exports['default'] = Exhibit;\n\n});","define('historic-locations/router', ['exports', 'ember', 'historic-locations/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    this.route(\"landing\");\n    this.route(\"other\");\n    this.resource(\"exhibits\", function () {\n      this.route(\"show\", { path: \"/:exhibit_id\" });\n    });\n    this.route(\"map\");\n  });\n\n  exports['default'] = Router;\n\n});","define('historic-locations/routes/exhibits', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n\n    setupController: function setupController(controller) {\n      var model = this.store.find(\"exhibit\");\n      controller.set(\"exhibits\", model);\n    }\n  });\n\n});","define('historic-locations/routes/exhibits/show', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n\n    model: function model(params) {\n      return this.store.find(\"exhibit\", params.exhibit_id);\n    }\n  });\n\n});","define('historic-locations/routes/map', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n\n    model: function model() {\n      return this.store.find(\"exhibit\");\n    }\n  });\n\n});","define('historic-locations/services/liquid-fire-modals', ['exports', 'liquid-fire/modals'], function (exports, Modals) {\n\n\t'use strict';\n\n\texports['default'] = Modals['default'];\n\n});","define('historic-locations/services/liquid-fire-transitions', ['exports', 'liquid-fire/transition-map'], function (exports, TransitionMap) {\n\n\t'use strict';\n\n\texports['default'] = TransitionMap['default'];\n\n});","define('historic-locations/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        inline(env, morph0, context, \"main-console\", [], {\"currentPath\": get(env, context, \"currentPath\"), \"showPage\": \"showPage\"});\n        content(env, morph1, context, \"liquid-outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/components/google-map', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/components/liquid-bind', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.0\",\n          blockParams: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, content = hooks.content;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            set(env, context, \"version\", blockArguments[0]);\n            content(env, morph0, context, \"version\");\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"liquid-versions\", [], {\"value\": get(env, context, \"value\"), \"use\": get(env, context, \"use\"), \"name\": \"liquid-bind\", \"renderWhenFalse\": true, \"innerClass\": get(env, context, \"innerClass\")}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.0\",\n            blockParams: 1,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement, blockArguments) {\n              var dom = env.dom;\n              var hooks = env.hooks, set = hooks.set, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              dom.insertBoundary(fragment, null);\n              dom.insertBoundary(fragment, 0);\n              set(env, context, \"version\", blockArguments[0]);\n              content(env, morph0, context, \"version\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.0\",\n          blockParams: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            set(env, context, \"container\", blockArguments[0]);\n            block(env, morph0, context, \"liquid-versions\", [], {\"value\": get(env, context, \"value\"), \"notify\": get(env, context, \"container\"), \"use\": get(env, context, \"use\"), \"name\": \"liquid-bind\", \"renderWhenFalse\": true}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"liquid-container\", [], {\"id\": get(env, context, \"innerId\"), \"class\": get(env, context, \"innerClass\")}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"if\", [get(env, context, \"containerless\")], {}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/components/liquid-container', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        inline(env, morph0, context, \"yield\", [get(env, context, \"this\")], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/components/liquid-if', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.0\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"      \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n              content(env, morph0, context, \"yield\");\n              return fragment;\n            }\n          };\n        }());\n        var child1 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.0\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createTextNode(\"      \");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              var el1 = dom.createTextNode(\"\\n\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, content = hooks.content;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n              content(env, morph0, context, \"lf-yield-inverse\");\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.0\",\n          blockParams: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            set(env, context, \"valueVersion\", blockArguments[0]);\n            block(env, morph0, context, \"if\", [get(env, context, \"valueVersion\")], {}, child0, child1);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"liquid-versions\", [], {\"value\": get(env, context, \"value\"), \"name\": get(env, context, \"helperName\"), \"use\": get(env, context, \"use\"), \"renderWhenFalse\": get(env, context, \"hasInverse\"), \"innerClass\": get(env, context, \"innerClass\")}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          var child0 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.0\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                content(env, morph0, context, \"yield\");\n                return fragment;\n              }\n            };\n          }());\n          var child1 = (function() {\n            return {\n              isHTMLBars: true,\n              revision: \"Ember@1.11.0\",\n              blockParams: 0,\n              cachedFragment: null,\n              hasRendered: false,\n              build: function build(dom) {\n                var el0 = dom.createDocumentFragment();\n                var el1 = dom.createTextNode(\"        \");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createComment(\"\");\n                dom.appendChild(el0, el1);\n                var el1 = dom.createTextNode(\"\\n\");\n                dom.appendChild(el0, el1);\n                return el0;\n              },\n              render: function render(context, env, contextualElement) {\n                var dom = env.dom;\n                var hooks = env.hooks, content = hooks.content;\n                dom.detectNamespace(contextualElement);\n                var fragment;\n                if (env.useFragmentCache && dom.canClone) {\n                  if (this.cachedFragment === null) {\n                    fragment = this.build(dom);\n                    if (this.hasRendered) {\n                      this.cachedFragment = fragment;\n                    } else {\n                      this.hasRendered = true;\n                    }\n                  }\n                  if (this.cachedFragment) {\n                    fragment = dom.cloneNode(this.cachedFragment, true);\n                  }\n                } else {\n                  fragment = this.build(dom);\n                }\n                var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n                content(env, morph0, context, \"lf-yield-inverse\");\n                return fragment;\n              }\n            };\n          }());\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.0\",\n            blockParams: 1,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement, blockArguments) {\n              var dom = env.dom;\n              var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              dom.insertBoundary(fragment, null);\n              dom.insertBoundary(fragment, 0);\n              set(env, context, \"valueVersion\", blockArguments[0]);\n              block(env, morph0, context, \"if\", [get(env, context, \"valueVersion\")], {}, child0, child1);\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.0\",\n          blockParams: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            set(env, context, \"container\", blockArguments[0]);\n            block(env, morph0, context, \"liquid-versions\", [], {\"value\": get(env, context, \"value\"), \"notify\": get(env, context, \"container\"), \"name\": get(env, context, \"helperName\"), \"use\": get(env, context, \"use\"), \"renderWhenFalse\": get(env, context, \"hasInverse\")}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"liquid-container\", [], {\"id\": get(env, context, \"innerId\"), \"class\": get(env, context, \"innerClass\")}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"if\", [get(env, context, \"containerless\")], {}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/components/liquid-measured', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"yield\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/components/liquid-modal', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.0\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode(\"    \");\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement(\"div\");\n            dom.setAttribute(el1,\"role\",\"dialog\");\n            var el2 = dom.createTextNode(\"\\n      \");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createComment(\"\");\n            dom.appendChild(el1, el2);\n            var el2 = dom.createTextNode(\"\\n    \");\n            dom.appendChild(el1, el2);\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode(\"\\n\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var element0 = dom.childAt(fragment, [1]);\n            var morph0 = dom.createMorphAt(element0,1,1);\n            element(env, element0, context, \"bind-attr\", [], {\"class\": \":lf-dialog cc.options.dialogClass\"});\n            element(env, element0, context, \"bind-attr\", [], {\"aria-labelledby\": \"cc.options.ariaLabelledBy\", \"aria-label\": \"cc.options.ariaLabel\"});\n            inline(env, morph0, context, \"view\", [get(env, context, \"innerView\")], {\"dismiss\": \"dismiss\"});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.0\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, block = hooks.block, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n          dom.insertBoundary(fragment, 0);\n          set(env, context, \"cc\", blockArguments[0]);\n          block(env, morph0, context, \"lm-container\", [], {\"action\": \"escape\", \"clickAway\": \"outsideClick\"}, child0, null);\n          content(env, morph1, context, \"lf-overlay\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"liquid-versions\", [], {\"name\": \"liquid-modal\", \"value\": get(env, context, \"currentContext\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/components/liquid-outlet', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.0\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          set(env, context, \"outletStateVersion\", blockArguments[0]);\n          inline(env, morph0, context, \"lf-outlet\", [], {\"staticState\": get(env, context, \"outletStateVersion\")});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"liquid-with\", [get(env, context, \"outletState\")], {\"id\": get(env, context, \"innerId\"), \"class\": get(env, context, \"innerClass\"), \"use\": get(env, context, \"use\"), \"name\": \"liquid-outlet\", \"containerless\": get(env, context, \"containerless\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/components/liquid-spacer', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          content(env, morph0, context, \"yield\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"liquid-measured\", [], {\"measurements\": get(env, context, \"measurements\")}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/components/liquid-versions', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.0\",\n            blockParams: 0,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement) {\n              var dom = env.dom;\n              var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              dom.insertBoundary(fragment, null);\n              dom.insertBoundary(fragment, 0);\n              inline(env, morph0, context, \"yield\", [get(env, context, \"version.value\")], {});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.0\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            var hooks = env.hooks, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            block(env, morph0, context, \"liquid-child\", [], {\"version\": get(env, context, \"version\"), \"visible\": false, \"didRender\": \"childDidRender\", \"class\": get(env, context, \"innerClass\")}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.0\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          set(env, context, \"version\", blockArguments[0]);\n          block(env, morph0, context, \"if\", [get(env, context, \"version.shouldRender\")], {}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"each\", [get(env, context, \"versions\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/components/liquid-with', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.0\",\n          blockParams: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            set(env, context, \"version\", blockArguments[0]);\n            inline(env, morph0, context, \"yield\", [get(env, context, \"version\")], {});\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"liquid-versions\", [], {\"value\": get(env, context, \"value\"), \"use\": get(env, context, \"use\"), \"name\": get(env, context, \"name\"), \"innerClass\": get(env, context, \"innerClass\")}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      var child0 = (function() {\n        var child0 = (function() {\n          return {\n            isHTMLBars: true,\n            revision: \"Ember@1.11.0\",\n            blockParams: 1,\n            cachedFragment: null,\n            hasRendered: false,\n            build: function build(dom) {\n              var el0 = dom.createDocumentFragment();\n              var el1 = dom.createComment(\"\");\n              dom.appendChild(el0, el1);\n              return el0;\n            },\n            render: function render(context, env, contextualElement, blockArguments) {\n              var dom = env.dom;\n              var hooks = env.hooks, set = hooks.set, get = hooks.get, inline = hooks.inline;\n              dom.detectNamespace(contextualElement);\n              var fragment;\n              if (env.useFragmentCache && dom.canClone) {\n                if (this.cachedFragment === null) {\n                  fragment = this.build(dom);\n                  if (this.hasRendered) {\n                    this.cachedFragment = fragment;\n                  } else {\n                    this.hasRendered = true;\n                  }\n                }\n                if (this.cachedFragment) {\n                  fragment = dom.cloneNode(this.cachedFragment, true);\n                }\n              } else {\n                fragment = this.build(dom);\n              }\n              var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n              dom.insertBoundary(fragment, null);\n              dom.insertBoundary(fragment, 0);\n              set(env, context, \"version\", blockArguments[0]);\n              inline(env, morph0, context, \"yield\", [get(env, context, \"version\")], {});\n              return fragment;\n            }\n          };\n        }());\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.11.0\",\n          blockParams: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment(\"\");\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          render: function render(context, env, contextualElement, blockArguments) {\n            var dom = env.dom;\n            var hooks = env.hooks, set = hooks.set, get = hooks.get, block = hooks.block;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n            dom.insertBoundary(fragment, null);\n            dom.insertBoundary(fragment, 0);\n            set(env, context, \"container\", blockArguments[0]);\n            block(env, morph0, context, \"liquid-versions\", [], {\"value\": get(env, context, \"value\"), \"notify\": get(env, context, \"container\"), \"use\": get(env, context, \"use\"), \"name\": get(env, context, \"name\")}, child0, null);\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, block = hooks.block;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n          dom.insertBoundary(fragment, null);\n          dom.insertBoundary(fragment, 0);\n          block(env, morph0, context, \"liquid-container\", [], {\"id\": get(env, context, \"innerId\"), \"class\": get(env, context, \"innerClass\")}, child0, null);\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, null);\n        dom.insertBoundary(fragment, 0);\n        block(env, morph0, context, \"if\", [get(env, context, \"containerless\")], {}, child0, child1);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/components/main-console', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"row\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-xs-6 col-sm-6\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h3\");\n        var el4 = dom.createTextNode(\"Map\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-xs-6 col-sm-6\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"h3\");\n        var el4 = dom.createTextNode(\"Exhibits\");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(element0, [1, 1]);\n        var element2 = dom.childAt(element0, [3, 1]);\n        element(env, element1, context, \"action\", [\"showPage\", \"map\"], {});\n        element(env, element2, context, \"action\", [\"showPage\", \"exhibits\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/exhibits', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.11.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n          inline(env, morph0, context, \"link-to\", [get(env, context, \"exhibit.title\"), \"exhibits.show\", get(env, context, \"exhibit.id\")], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"ul\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);\n        var morph1 = dom.createMorphAt(fragment,2,2,contextualElement);\n        block(env, morph0, context, \"each\", [get(env, context, \"exhibits\")], {\"keyword\": \"exhibit\"}, child0, null);\n        content(env, morph1, context, \"liquid-outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/exhibits/show', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"row\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"div\");\n        dom.setAttribute(el2,\"class\",\"col-xs-12 col-sm-12 exhibit-image\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"img\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, element = hooks.element;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0, 1, 1]);\n        element(env, element0, context, \"bind-attr\", [], {\"src\": get(env, context, \"model.url\")});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/landing', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h1\");\n        var el2 = dom.createTextNode(\"LANDING\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);\n        inline(env, morph0, context, \"link-to\", [\"Other\", \"other\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/map', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        dom.insertBoundary(fragment, 0);\n        inline(env, morph0, context, \"google-map\", [], {\"locations\": get(env, context, \"model\"), \"onMarkerClick\": \"goToExhibit\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/templates/other', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.11.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h1\");\n        var el2 = dom.createTextNode(\"OTHER\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);\n        inline(env, morph0, context, \"link-to\", [\"Landing\", \"landing\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('historic-locations/tests/adapters/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - adapters');\n  test('adapters/application.js should pass jshint', function() { \n    ok(true, 'adapters/application.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/components/google-map.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/google-map.js should pass jshint', function() { \n    ok(false, 'components/google-map.js should pass jshint.\\ncomponents/google-map.js: line 43, col 7, Function declarations should not be placed in blocks. Use a function expression or move the statement to the top of the outer function.\\ncomponents/google-map.js: line 44, col 97, Missing semicolon.\\ncomponents/google-map.js: line 52, col 7, Function declarations should not be placed in blocks. Use a function expression or move the statement to the top of the outer function.\\ncomponents/google-map.js: line 9, col 19, \\'google\\' is not defined.\\ncomponents/google-map.js: line 13, col 19, \\'google\\' is not defined.\\ncomponents/google-map.js: line 23, col 26, \\'google\\' is not defined.\\ncomponents/google-map.js: line 24, col 24, \\'google\\' is not defined.\\ncomponents/google-map.js: line 30, col 7, \\'google\\' is not defined.\\ncomponents/google-map.js: line 44, col 26, \\'google\\' is not defined.\\ncomponents/google-map.js: line 45, col 26, \\'google\\' is not defined.\\ncomponents/google-map.js: line 62, col 11, \\'wpid\\' is defined but never used.\\n\\n11 errors'); \n  });\n\n});","define('historic-locations/tests/components/main-console.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/main-console.js should pass jshint', function() { \n    ok(true, 'components/main-console.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/controllers/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/application.js should pass jshint', function() { \n    ok(true, 'controllers/application.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/controllers/exhibits/show.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/exhibits');\n  test('controllers/exhibits/show.js should pass jshint', function() { \n    ok(true, 'controllers/exhibits/show.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/controllers/map.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/map.js should pass jshint', function() { \n    ok(true, 'controllers/map.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/helpers/resolver', ['exports', 'ember/resolver', 'historic-locations/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('historic-locations/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/helpers/start-app', ['exports', 'ember', 'historic-locations/app', 'historic-locations/router', 'historic-locations/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('historic-locations/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/models/exhibit.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/exhibit.js should pass jshint', function() { \n    ok(true, 'models/exhibit.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(false, 'router.js should pass jshint.\\nrouter.js: line 12, col 48, Missing semicolon.\\n\\n1 error'); \n  });\n\n});","define('historic-locations/tests/routes/exhibits.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/exhibits.js should pass jshint', function() { \n    ok(true, 'routes/exhibits.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/routes/exhibits/show.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/exhibits');\n  test('routes/exhibits/show.js should pass jshint', function() { \n    ok(true, 'routes/exhibits/show.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/routes/map.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/map.js should pass jshint', function() { \n    ok(true, 'routes/map.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/test-helper', ['historic-locations/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('historic-locations/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/transitions.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('transitions.js should pass jshint', function() { \n    ok(false, 'transitions.js should pass jshint.\\ntransitions.js: line 8, col 2, Unnecessary semicolon.\\n\\n1 error'); \n  });\n\n});","define('historic-locations/tests/unit/components/google-map-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"google-map\", {});\n\n  ember_qunit.test(\"it renders\", function (assert) {\n    assert.expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    assert.equal(component._state, \"preRender\");\n\n    // renders the component to the page\n    this.render();\n    assert.equal(component._state, \"inDOM\");\n  });\n\n  // specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('historic-locations/tests/unit/components/google-map-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/google-map-test.js should pass jshint', function() { \n    ok(true, 'unit/components/google-map-test.js should pass jshint.'); \n  });\n\n});","define('historic-locations/tests/unit/components/main-console-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForComponent(\"main-console\", {});\n\n  ember_qunit.test(\"it renders\", function (assert) {\n    assert.expect(2);\n\n    // creates the component instance\n    var component = this.subject();\n    assert.equal(component._state, \"preRender\");\n\n    // renders the component to the page\n    this.render();\n    assert.equal(component._state, \"inDOM\");\n  });\n\n  // specify the other units that are required for this test\n  // needs: ['component:foo', 'helper:bar']\n\n});","define('historic-locations/tests/unit/components/main-console-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/components');\n  test('unit/components/main-console-test.js should pass jshint', function() { \n    ok(true, 'unit/components/main-console-test.js should pass jshint.'); \n  });\n\n});","define('historic-locations/transitions', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = function () {\n    this.transition(this.fromRoute(\"map\"), this.toRoute(\"exhibits\"), this.use(\"toUp\"), this.reverse(\"toDown\"));\n  };\n\n});","define('historic-locations/transitions/cross-fade', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n  'use strict';\n\n\n  exports['default'] = crossFade;\n  // BEGIN-SNIPPET cross-fade-definition\n  function crossFade() {\n    var opts = arguments[0] === undefined ? {} : arguments[0];\n\n    liquid_fire.stop(this.oldElement);\n    return liquid_fire.Promise.all([liquid_fire.animate(this.oldElement, { opacity: 0 }, opts), liquid_fire.animate(this.newElement, { opacity: [opts.maxOpacity || 1, 0] }, opts)]);\n  } // END-SNIPPET\n\n});","define('historic-locations/transitions/default', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n  'use strict';\n\n\n\n  // This is what we run when no animation is asked for. It just sets\n  // the newly-added element to visible (because we always start them\n  // out invisible so that transitions can control their initial\n  // appearance).\n  exports['default'] = defaultTransition;\n  function defaultTransition() {\n    if (this.newElement) {\n      this.newElement.css({ visibility: \"\" });\n    }\n    return liquid_fire.Promise.resolve();\n  }\n\n});","define('historic-locations/transitions/explode', ['exports', 'ember', 'liquid-fire'], function (exports, Ember, liquid_fire) {\n\n  'use strict';\n\n\n\n  // Explode is not, by itself, an animation. It exists to pull apart\n  // other elements so that each of the pieces can be targeted by\n  // animations.\n\n  exports['default'] = explode;\n\n  function explode() {\n    var _this = this;\n\n    for (var _len = arguments.length, pieces = Array(_len), _key = 0; _key < _len; _key++) {\n      pieces[_key] = arguments[_key];\n    }\n\n    var sawBackgroundPiece = false;\n    var promises = pieces.map(function (piece) {\n      if (piece.matchBy) {\n        return matchAndExplode(_this, piece);\n      } else if (piece.pick || piece.pickOld || piece.pickNew) {\n        return explodePiece(_this, piece);\n      } else {\n        sawBackgroundPiece = true;\n        return runAnimation(_this, piece);\n      }\n    });\n    if (!sawBackgroundPiece) {\n      if (this.newElement) {\n        this.newElement.css({ visibility: \"\" });\n      }\n      if (this.oldElement) {\n        this.oldElement.css({ visibility: \"hidden\" });\n      }\n    }\n    return liquid_fire.Promise.all(promises);\n  }\n\n  function explodePiece(context, piece) {\n    var childContext = Ember['default'].copy(context);\n    var selectors = [piece.pickOld || piece.pick, piece.pickNew || piece.pick];\n    var cleanupOld, cleanupNew;\n\n    if (selectors[0] || selectors[1]) {\n      cleanupOld = _explodePart(context, \"oldElement\", childContext, selectors[0]);\n      cleanupNew = _explodePart(context, \"newElement\", childContext, selectors[1]);\n      if (!cleanupOld && !cleanupNew) {\n        return liquid_fire.Promise.resolve();\n      }\n    }\n\n    return runAnimation(childContext, piece)[\"finally\"](function () {\n      if (cleanupOld) {\n        cleanupOld();\n      }\n      if (cleanupNew) {\n        cleanupNew();\n      }\n    });\n  }\n\n  function _explodePart(context, field, childContext, selector) {\n    var child, childOffset, width, height, newChild;\n    var elt = context[field];\n    childContext[field] = null;\n    if (elt && selector) {\n      child = elt.find(selector);\n      if (child.length > 0) {\n        childOffset = child.offset();\n        width = child.outerWidth();\n        height = child.outerHeight();\n        newChild = child.clone();\n\n        // Hide the original element\n        child.css({ visibility: \"hidden\" });\n\n        // If the original element's parent was hidden, hide our clone\n        // too.\n        if (elt.css(\"visibility\") === \"hidden\") {\n          newChild.css({ visibility: \"hidden\" });\n        }\n        newChild.appendTo(elt.parent());\n        newChild.outerWidth(width);\n        newChild.outerHeight(height);\n        var newParentOffset = newChild.offsetParent().offset();\n        newChild.css({\n          position: \"absolute\",\n          top: childOffset.top - newParentOffset.top,\n          left: childOffset.left - newParentOffset.left,\n          margin: 0\n        });\n\n        // Pass the clone to the next animation\n        childContext[field] = newChild;\n        return function cleanup() {\n          newChild.remove();\n          child.css({ visibility: \"\" });\n        };\n      }\n    }\n  }\n\n  function animationFor(context, piece) {\n    var name, args, func;\n    if (!piece.use) {\n      throw new Error(\"every argument to the 'explode' animation must include a followup animation to 'use'\");\n    }\n    if (Ember['default'].isArray(piece.use)) {\n      name = piece.use[0];\n      args = piece.use.slice(1);\n    } else {\n      name = piece.use;\n      args = [];\n    }\n    if (typeof name === \"function\") {\n      func = name;\n    } else {\n      func = context.lookup(name);\n    }\n    return function () {\n      return liquid_fire.Promise.resolve(func.apply(this, args));\n    };\n  }\n\n  function runAnimation(context, piece) {\n    return new liquid_fire.Promise(function (resolve, reject) {\n      animationFor(context, piece).apply(context).then(resolve, reject);\n    });\n  }\n\n  function matchAndExplode(context, piece) {\n    if (!context.oldElement) {\n      return liquid_fire.Promise.resolve();\n    }\n\n    var hits = Ember['default'].A(context.oldElement.find(\"[\" + piece.matchBy + \"]\").toArray());\n    return liquid_fire.Promise.all(hits.map(function (elt) {\n      return explodePiece(context, {\n        pick: \"[\" + piece.matchBy + \"=\" + Ember['default'].$(elt).attr(piece.matchBy) + \"]\",\n        use: piece.use\n      });\n    }));\n  }\n\n});","define('historic-locations/transitions/fade', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n  'use strict';\n\n\n  exports['default'] = fade;\n\n  // BEGIN-SNIPPET fade-definition\n  function fade() {\n    var _this = this;\n\n    var opts = arguments[0] === undefined ? {} : arguments[0];\n\n    var firstStep;\n    var outOpts = opts;\n    var fadingElement = findFadingElement(this);\n\n    if (fadingElement) {\n      // We still have some older version that is in the process of\n      // fading out, so out first step is waiting for it to finish.\n      firstStep = liquid_fire.finish(fadingElement, \"fade-out\");\n    } else {\n      if (liquid_fire.isAnimating(this.oldElement, \"fade-in\")) {\n        // if the previous view is partially faded in, scale its\n        // fade-out duration appropriately.\n        outOpts = { duration: liquid_fire.timeSpent(this.oldElement, \"fade-in\") };\n      }\n      liquid_fire.stop(this.oldElement);\n      firstStep = liquid_fire.animate(this.oldElement, { opacity: 0 }, outOpts, \"fade-out\");\n    }\n    return firstStep.then(function () {\n      return liquid_fire.animate(_this.newElement, { opacity: [opts.maxOpacity || 1, 0] }, opts, \"fade-in\");\n    });\n  }\n\n  function findFadingElement(context) {\n    for (var i = 0; i < context.older.length; i++) {\n      var entry = context.older[i];\n      if (liquid_fire.isAnimating(entry.element, \"fade-out\")) {\n        return entry.element;\n      }\n    }\n    if (liquid_fire.isAnimating(context.oldElement, \"fade-out\")) {\n      return context.oldElement;\n    }\n  }\n  // END-SNIPPET\n\n});","define('historic-locations/transitions/flex-grow', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n  'use strict';\n\n\n  exports['default'] = flexGrow;\n  function flexGrow(opts) {\n    liquid_fire.stop(this.oldElement);\n    return liquid_fire.Promise.all([liquid_fire.animate(this.oldElement, { \"flex-grow\": 0 }, opts), liquid_fire.animate(this.newElement, { \"flex-grow\": [1, 0] }, opts)]);\n  }\n\n});","define('historic-locations/transitions/fly-to', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n  'use strict';\n\n\n\n  exports['default'] = flyTo;\n  function flyTo() {\n    var _this = this;\n\n    var opts = arguments[0] === undefined ? {} : arguments[0];\n\n    if (!this.newElement) {\n      return liquid_fire.Promise.resolve();\n    } else if (!this.oldElement) {\n      this.newElement.css({ visibility: \"\" });\n      return liquid_fire.Promise.resolve();\n    }\n\n    var oldOffset = this.oldElement.offset();\n    var newOffset = this.newElement.offset();\n\n    var motion = {\n      translateX: newOffset.left - oldOffset.left,\n      translateY: newOffset.top - oldOffset.top,\n      outerWidth: this.newElement.outerWidth(),\n      outerHeight: this.newElement.outerHeight()\n    };\n\n    this.newElement.css({ visibility: \"hidden\" });\n    return liquid_fire.animate(this.oldElement, motion, opts).then(function () {\n      _this.newElement.css({ visibility: \"\" });\n    });\n  }\n\n});","define('historic-locations/transitions/move-over', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n  'use strict';\n\n\n\n  exports['default'] = moveOver;\n\n  function moveOver(dimension, direction, opts) {\n    var _this = this;\n\n    var oldParams = {},\n        newParams = {},\n        firstStep,\n        property,\n        measure;\n\n    if (dimension.toLowerCase() === \"x\") {\n      property = \"translateX\";\n      measure = \"width\";\n    } else {\n      property = \"translateY\";\n      measure = \"height\";\n    }\n\n    if (liquid_fire.isAnimating(this.oldElement, \"moving-in\")) {\n      firstStep = liquid_fire.finish(this.oldElement, \"moving-in\");\n    } else {\n      liquid_fire.stop(this.oldElement);\n      firstStep = liquid_fire.Promise.resolve();\n    }\n\n    return firstStep.then(function () {\n      var bigger = biggestSize(_this, measure);\n      oldParams[property] = bigger * direction + \"px\";\n      newParams[property] = [\"0px\", -1 * bigger * direction + \"px\"];\n\n      return liquid_fire.Promise.all([liquid_fire.animate(_this.oldElement, oldParams, opts), liquid_fire.animate(_this.newElement, newParams, opts, \"moving-in\")]);\n    });\n  }\n\n  function biggestSize(context, dimension) {\n    var sizes = [];\n    if (context.newElement) {\n      sizes.push(parseInt(context.newElement.css(dimension), 10));\n      sizes.push(parseInt(context.newElement.parent().css(dimension), 10));\n    }\n    if (context.oldElement) {\n      sizes.push(parseInt(context.oldElement.css(dimension), 10));\n      sizes.push(parseInt(context.oldElement.parent().css(dimension), 10));\n    }\n    return Math.max.apply(null, sizes);\n  }\n\n});","define('historic-locations/transitions/scale', ['exports', 'liquid-fire'], function (exports, liquid_fire) {\n\n  'use strict';\n\n\n\n  exports['default'] = scale;\n  function scale() {\n    var _this = this;\n\n    var opts = arguments[0] === undefined ? {} : arguments[0];\n\n    return liquid_fire.animate(this.oldElement, { scale: [0.2, 1] }, opts).then(function () {\n      return liquid_fire.animate(_this.newElement, { scale: [1, 0.2] }, opts);\n    });\n  }\n\n});","define('historic-locations/transitions/scroll-then', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = function (nextTransitionName, options) {\n    var _this = this;\n\n    for (var _len = arguments.length, rest = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      rest[_key - 2] = arguments[_key];\n    }\n\n    Ember['default'].assert(\"You must provide a transition name as the first argument to scrollThen. Example: this.use('scrollThen', 'toLeft')\", \"string\" === typeof nextTransitionName);\n\n    var el = document.getElementsByTagName(\"html\");\n    var nextTransition = this.lookup(nextTransitionName);\n    if (!options) {\n      options = {};\n    }\n\n    Ember['default'].assert(\"The second argument to scrollThen is passed to Velocity's scroll function and must be an object\", \"object\" === typeof options);\n\n    // set scroll options via: this.use('scrollThen', 'ToLeft', {easing: 'spring'})\n    options = Ember['default'].merge({ duration: 500, offset: 0 }, options);\n\n    // additional args can be passed through after the scroll options object\n    // like so: this.use('scrollThen', 'moveOver', {duration: 100}, 'x', -1);\n\n    return window.$.Velocity(el, \"scroll\", options).then(function () {\n      nextTransition.apply(_this, rest);\n    });\n  };\n\n});","define('historic-locations/transitions/to-down', ['exports', 'historic-locations/transitions/move-over'], function (exports, moveOver) {\n\n  'use strict';\n\n  exports['default'] = function (opts) {\n    return moveOver['default'].call(this, \"y\", 1, opts);\n  };\n\n});","define('historic-locations/transitions/to-left', ['exports', 'historic-locations/transitions/move-over'], function (exports, moveOver) {\n\n  'use strict';\n\n  exports['default'] = function (opts) {\n    return moveOver['default'].call(this, \"x\", -1, opts);\n  };\n\n});","define('historic-locations/transitions/to-right', ['exports', 'historic-locations/transitions/move-over'], function (exports, moveOver) {\n\n  'use strict';\n\n  exports['default'] = function (opts) {\n    return moveOver['default'].call(this, \"x\", 1, opts);\n  };\n\n});","define('historic-locations/transitions/to-up', ['exports', 'historic-locations/transitions/move-over'], function (exports, moveOver) {\n\n  'use strict';\n\n  exports['default'] = function (opts) {\n    return moveOver['default'].call(this, \"y\", -1, opts);\n  };\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('historic-locations/config/environment', ['ember'], function(Ember) {\n  var prefix = 'historic-locations';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"historic-locations/tests/test-helper\");\n} else {\n  require(\"historic-locations/app\")[\"default\"].create({\"name\":\"historic-locations\",\"version\":\"0.0.0.b197d396\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdrnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtzanJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxzpnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"historic-locations.js"}